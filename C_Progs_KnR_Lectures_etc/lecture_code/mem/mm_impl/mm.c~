/* 
 * Simple, 32-bit and 64-bit clean allocator based on implicit free
 * lists, first-fit placement, and boundary tag coalescing, as described
 * in the CS:APP3e text. Blocks must be aligned to doubleword (8 byte) 
 * boundaries. Minimum block size is 16 bytes. 
 */
#include <stdio.h>
#include <string.h>
#include <stdlib.h>

#include "mm.h"
#include "memlib.h"

#define NEXTFITx

/* $begin mallocmacros */
/* Basic constants and macros */
#define WSIZE       4       /* Word and header/footer size (bytes) */ //line:vm:mm:beginconst
#define DSIZE       8       /* Double word size (bytes) */
#define CHUNKSIZE  (1<<12)  /* Extend heap by this amount (bytes) */  //line:vm:mm:endconst 

#define MAX(x, y) ((x) > (y)? (x) : (y))  

/* Pack a size and allocated bit into a word */
#define PACK(size, alloc)  ((size) | (alloc)) //line:vm:mm:pack

/* Read and write a word at address p */
#define GET(p)       (*(unsigned int *)(p))            //line:vm:mm:get
#define PUT(p, val)  (*(unsigned int *)(p) = (val))    //line:vm:mm:put

/* Read the size and allocated fields from address p */
#define GET_SIZE(p)  (GET(p) & ~0x7)                   //line:vm:mm:getsize
#define GET_ALLOC(p) (GET(p) & 0x1)                    //line:vm:mm:getalloc

/* Given block ptr bp, compute address of its header and footer */
#define HDRP(bp)       ((char *)(bp) - WSIZE)                      //line:vm:mm:hdrp
#define FTRP(bp)       ((char *)(bp) + GET_SIZE(HDRP(bp)) - DSIZE) //line:vm:mm:ftrp

/* Given block ptr bp, compute address of next and previous blocks */
#define NEXT_BLKP(bp)  ((char *)(bp) + GET_SIZE(((char *)(bp) - WSIZE))) //line:vm:mm:nextblkp
#define PREV_BLKP(bp)  ((char *)(bp) - GET_SIZE(((char *)(bp) - DSIZE))) //line:vm:mm:prevblkp
/* $end mallocmacros */

static char *heap_listp = 0;

#ifdef NEXT_FIT
static char *rover;
#endif

static void *extend_head(size_t words);
static void place(void *bp, size_t asize);
static void *find_fit(size_t asize);
static void *coalesce(void *bp);
static void printblock(void *bp);
static void checkheap(int verbose);
static void checkblock(void *bp);

int mm_init(void) {
  //obviously a void * with value -1 is not a real address - error code
  if ((heap_listp = mem_sbrk(4*WSIZE)) == (void*)-1)
    return - 1;

  PUT(heap_listp, 0); //alignment padding
  PUT(heap_listp + (1*WSIZE), PACK(DSIZE, 1)); //prologue header
  PUT(heap_listp + (2*WSIZE), PACK(DSIZE, 1)); //prologue footer
  PUT(heap_listp + (3*WSIZE), PACK(0,1));      //epilogue header
  heap_listp += (2*WSIZE);

  if(extend_heap(CHUNKSIZE/WSIZE))
    return -1;

  return 0;
}





















static void *extend_heap(size_t words)
{
  char *bp;
  size_t size;

  size = (words % 2) ? (words + 1) * WSIZE : words * WSIZE;

  //bp will be starting address of new chunk
  if((long)(bp = mem_sbrk(size)) == -1)
    return NULL;

  //initialize free block header/footer and the epilogue header

  PUT(HDRP(bp), PACK(size, 0)); //free block header
  PUT(FTRP(bp), PACK(size, 0)); //free block footer
  PUT(HDRP(NEXT_BLKP(bp)), PACK(0, 1)); //new epilogue header

  //coalesce if prev block was free

  return coalesce(bp);
}
